{"version":3,"sources":["firebase.js","App.jsx","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","App","state","solicitudes","_this2","this","database","ref","on","snapshot","val","setState","react_default","a","createElement","className","lib","data-field","data-fiel","map","element","key","numeroSolicitud","status","nombre","fecha","monto","direccion","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oRAYAA,IAASC,cATI,CACXC,OAAQ,0CACRC,WAAY,+BACZC,YAAa,sCACbC,UAAW,eACXC,cAAe,2BACfC,kBAAmB,iBAINP,QAAf,kBC+CeQ,6MArDbC,MAAQ,CACNC,YAAa,uFAGK,IAAAC,EAAAC,KACDZ,EAASa,WAAWC,IAAI,eAChCC,GAAG,QAAS,SAAAC,GACnB,IAAIN,EAAcM,EAASC,MAC3BN,EAAKO,SAAS,CAAER,mDAKlB,OACES,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAEbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,gBAAlB,UAIAH,EAAAC,EAAAC,cAAA,eACEF,EAAAC,EAAAC,cAACE,EAAA,MAAD,KACEJ,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,MAAIG,cAAA,GAAJ,MACAL,EAAAC,EAAAC,cAAA,MAAII,aAAA,GAAJ,UACAN,EAAAC,EAAAC,cAAA,MAAII,aAAA,GAAJ,UACAN,EAAAC,EAAAC,cAAA,MAAII,aAAA,GAAJ,SACAN,EAAAC,EAAAC,cAAA,MAAII,aAAA,GAAJ,SACAN,EAAAC,EAAAC,cAAA,MAAII,aAAA,GAAJ,gBACAN,EAAAC,EAAAC,cAAA,MAAII,aAAA,GAAJ,eAEDb,KAAKH,MAAMC,YAAYgB,IAAI,SAAAC,GAC1B,OACER,EAAAC,EAAAC,cAAA,MAAIO,IAAKD,EAAQE,iBACfV,EAAAC,EAAAC,cAAA,UAAKM,EAAQE,iBACbV,EAAAC,EAAAC,cAAA,UAAKM,EAAQG,QACbX,EAAAC,EAAAC,cAAA,UAAKM,EAAQI,QACbZ,EAAAC,EAAAC,cAAA,UAAKM,EAAQK,OACbb,EAAAC,EAAAC,cAAA,UAAKM,EAAQM,OACbd,EAAAC,EAAAC,cAAA,UAAKM,EAAQO,WACbf,EAAAC,EAAAC,cAAA,+BA1CFc,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECXNC,IAASC,OAAOvB,EAAAC,EAAAC,cAACsB,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.4b076c02.chunk.js","sourcesContent":["\nimport firebase from 'firebase';\n\nlet config = {\n  apiKey: \"AIzaSyB5L3Ce4MAZ2L8bZCsPUU406RX3NJXiNjw\",\n  authDomain: \"broxel-5b301.firebaseapp.com\",\n  databaseURL: \"https://broxel-5b301.firebaseio.com\",\n  projectId: \"broxel-5b301\",\n  storageBucket: \"broxel-5b301.appspot.com\",\n  messagingSenderId: \"640424790262\"\n};\n\nfirebase.initializeApp(config);\nexport default firebase;\n","import React, { Component } from 'react';\nimport firebase from './firebase';\nimport './App.css';\nimport { Table } from 'react-materialize'\n// import { Link } from 'react-router-dom';\n\nclass App extends Component {\n  state = {\n    solicitudes: []\n  }\n\n  componentDidMount() {\n    const itemsRef = firebase.database().ref('solicitudes');\n    itemsRef.on('value', snapshot => {\n      let solicitudes = snapshot.val();\n      this.setState({ solicitudes });\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n\n        <header className=\"title-broxel\">\n          Broxel\n        </header>\n\n        <section>\n          <Table>\n            <tbody>\n              <tr>\n                <th data-field>ID</th>\n                <th data-fiel>Estado</th>\n                <th data-fiel>Nombre</th>\n                <th data-fiel>Fecha</th>\n                <th data-fiel>Monto</th>\n                <th data-fiel>Direcci√≥n</th>\n                <th data-fiel>Documentos</th>\n              </tr>\n              {this.state.solicitudes.map(element => {\n                return (\n                  <tr key={element.numeroSolicitud}>\n                    <td>{element.numeroSolicitud}</td>\n                    <td>{element.status}</td>\n                    <td>{element.nombre}</td>\n                    <td>{element.fecha}</td>\n                    <td>{element.monto}</td>\n                    <td>{element.direccion}</td>\n                    <td>Ver</td>\n                  </tr>\n                );\n              })}\n            </tbody>\n          </Table>\n        </section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'materialize-css/dist/css/materialize.min.css'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n\nserviceWorker.unregister();\n"],"sourceRoot":""}